buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-mysql:11.1.1'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '11.1.1'
}

group = 'com.isaque.admin.catalogo.infrastructure'
version = '1.0-SNAPSHOT'

bootJar {
    archiveFileName = 'infrastructure.jar'
    destinationDirectory.set(file("${rootProject.layout.buildDirectory}/libs"))
}

repositories {
    mavenCentral()
}

configurations {
    mockitoAgent
}

dependencies {
    implementation(project(':domain'))
    implementation(project(':application'))

    implementation ("io.vavr:vavr:0.10.5")

    implementation('com.mysql:mysql-connector-j:9.2.0')

    implementation('org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.4')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4')

    implementation('org.springframework.boot:spring-boot-starter-web:3.4.1') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation('ch.qos.logback:logback-core:1.5.16')
    implementation('ch.qos.logback:logback-classic:1.5.16')
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    implementation('com.fasterxml.jackson.module:jackson-module-afterburner')

    testImplementation("org.flywaydb:flyway-mysql")
    testImplementation('org.flywaydb:flyway-core')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')

    mockitoAgent('org.mockito:mockito-core:5.14.1') {
        transitive = false
    }

    testRuntimeOnly('com.h2database:h2')
}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:mysql://localhost:3306/adm_videos'
    user = System.getenv('FLYWAY_USER') ?: 'root'
    password = System.getenv('FLYWAY_PASS') ?: '123456'
    cleanDisabled = false
}

test {
    useJUnitPlatform()
}

tasks {
    test {
        jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
    }
}